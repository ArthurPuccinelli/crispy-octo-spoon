import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.SUPABASE_ANON_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

// Criar cliente Supabase
const supabase = supabaseUrl && supabaseAnonKey
    ? createClient(supabaseUrl, supabaseAnonKey)
    : null;

// Fun√ß√£o para executar queries de keepalive (mesma l√≥gica da scheduled function)
async function executeKeepaliveQueries() {
    if (!supabase) {
        throw new Error('Supabase n√£o configurado - verifique as vari√°veis de ambiente');
    }

    const results = {
        timestamp: new Date().toISOString(),
        queries: [],
        success: true,
        errors: [],
        performance: {
            totalDuration: 0,
            averageQueryTime: 0
        }
    };

    const startTime = Date.now();

    try {
        console.log('üîÑ Iniciando keepalive do Supabase...');

        // Query 1: Verifica√ß√£o de conectividade b√°sica
        console.log('üì° Testando conectividade...');
        const connectionStart = Date.now();
        const { data: connectionTest, error: connectionError } = await supabase
            .from('clientes')
            .select('count')
            .limit(1);

        const connectionDuration = Date.now() - connectionStart;

        results.queries.push({
            name: 'connection_test',
            success: !connectionError,
            error: connectionError?.message || null,
            duration: connectionDuration,
            description: 'Teste de conectividade b√°sica'
        });

        if (connectionError) {
            results.success = false;
            results.errors.push(`Connection test failed: ${connectionError.message}`);
        }

        // Query 2: Verifica√ß√£o de tabelas principais
        console.log('üóÉÔ∏è Verificando tabelas...');
        const tables = ['clientes', 'produtos', 'servicos_contratados'];

        for (const table of tables) {
            try {
                const tableStart = Date.now();
                const { data, error } = await supabase
                    .from(table)
                    .select('id')
                    .limit(1);

                const tableDuration = Date.now() - tableStart;

                results.queries.push({
                    name: `table_check_${table}`,
                    success: !error,
                    error: error?.message || null,
                    duration: tableDuration,
                    description: `Verifica√ß√£o da tabela ${table}`
                });

                if (error) {
                    results.errors.push(`Table ${table} check failed: ${error.message}`);
                }
            } catch (err) {
                const tableDuration = Date.now() - Date.now();
                results.queries.push({
                    name: `table_check_${table}`,
                    success: false,
                    error: err.message,
                    duration: tableDuration,
                    description: `Verifica√ß√£o da tabela ${table}`
                });
                results.errors.push(`Table ${table} check failed: ${err.message}`);
            }
        }

        // Query 3: Teste de performance com query mais complexa
        console.log('‚ö° Testando performance...');
        const perfStart = Date.now();
        const { data: perfTest, error: perfError } = await supabase
            .from('clientes')
            .select('id, nome, created_at')
            .order('created_at', { ascending: false })
            .limit(5);

        const perfDuration = Date.now() - perfStart;

        results.queries.push({
            name: 'performance_test',
            success: !perfError,
            error: perfError?.message || null,
            duration: perfDuration,
            recordCount: perfTest?.length || 0,
            description: 'Teste de performance com query complexa'
        });

        if (perfError) {
            results.success = false;
            results.errors.push(`Performance test failed: ${perfError.message}`);
        }

        // Calcular estat√≠sticas de performance
        const totalDuration = Date.now() - startTime;
        const successfulQueries = results.queries.filter(q => q.success);
        const averageQueryTime = successfulQueries.length > 0
            ? successfulQueries.reduce((sum, q) => sum + q.duration, 0) / successfulQueries.length
            : 0;

        results.performance = {
            totalDuration,
            averageQueryTime: Math.round(averageQueryTime),
            successfulQueries: successfulQueries.length,
            totalQueries: results.queries.length
        };

        return results;

    } catch (error) {
        console.error('‚ùå Erro durante keepalive:', error);
        results.success = false;
        results.errors.push(`General error: ${error.message}`);
        results.performance.totalDuration = Date.now() - startTime;
        return results;
    }
}

// Fun√ß√£o principal de teste
async function testKeepalive() {
    console.log('üß™ Testando fun√ß√£o de keepalive do Supabase...');
    console.log('üìÖ Timestamp:', new Date().toISOString());
    console.log('üîß Configura√ß√µes:');
    console.log('   - Supabase URL:', supabaseUrl ? '‚úÖ Configurado' : '‚ùå N√£o configurado');
    console.log('   - Supabase Key:', supabaseAnonKey ? '‚úÖ Configurado' : '‚ùå N√£o configurado');
    console.log('');

    if (!supabase) {
        console.error('‚ùå Supabase n√£o configurado!');
        console.log('üìã Verifique as vari√°veis de ambiente:');
        console.log('   - SUPABASE_URL ou NEXT_PUBLIC_SUPABASE_URL');
        console.log('   - SUPABASE_ANON_KEY ou NEXT_PUBLIC_SUPABASE_ANON_KEY');
        return;
    }

    try {
        const results = await executeKeepaliveQueries();

        console.log('');
        console.log('üìä RESULTADOS DO TESTE:');
        console.log('========================');
        console.log(`‚úÖ Status: ${results.success ? 'SUCESSO' : 'ERRO'}`);
        console.log(`‚è±Ô∏è  Dura√ß√£o Total: ${results.performance.totalDuration}ms`);
        console.log(`üìà Dura√ß√£o M√©dia: ${results.performance.averageQueryTime}ms`);
        console.log(`üî¢ Queries Executadas: ${results.performance.totalQueries}`);
        console.log(`‚úÖ Queries Bem-sucedidas: ${results.performance.successfulQueries}`);
        console.log(`‚ùå Erros: ${results.errors.length}`);

        if (results.errors.length > 0) {
            console.log('');
            console.log('üö® ERROS ENCONTRADOS:');
            results.errors.forEach((error, index) => {
                console.log(`   ${index + 1}. ${error}`);
            });
        }

        console.log('');
        console.log('üìã DETALHES DAS QUERIES:');
        results.queries.forEach((query, index) => {
            const status = query.success ? '‚úÖ' : '‚ùå';
            console.log(`   ${index + 1}. ${status} ${query.name} (${query.duration}ms)`);
            if (query.error) {
                console.log(`      Erro: ${query.error}`);
            }
        });

        console.log('');
        if (results.success) {
            console.log('üéâ Teste conclu√≠do com sucesso! O Supabase est√° funcionando corretamente.');
        } else {
            console.log('‚ö†Ô∏è  Teste conclu√≠do com erros. Verifique a configura√ß√£o do Supabase.');
        }

    } catch (error) {
        console.error('üí• Erro fatal durante o teste:', error);
    }
}

// Executar teste se chamado diretamente
if (process.argv[1] && process.argv[1].endsWith('test-keepalive.mjs')) {
    testKeepalive();
}

export { testKeepalive, executeKeepaliveQueries };


