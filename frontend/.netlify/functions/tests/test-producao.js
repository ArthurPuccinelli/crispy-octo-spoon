/**
 * üß™ Testes para API de Clientes em PRODU√á√ÉO - Crispy Octo Spoon
 * 
 * Este arquivo cont√©m testes para validar as funcionalidades da API de clientes
 * em ambiente de produ√ß√£o no Netlify.
 * 
 * Para executar os testes:
 * 1. Configure as vari√°veis de ambiente
 * 2. Execute: node tests/test-producao.js
 */

const axios = require('axios');

// Configura√ß√µes para PRODU√á√ÉO
const PROD_CONFIG = {
  baseURL: process.env.PROD_API_URL || 'https://crispy-octo-spoon.netlify.app/.netlify/functions/api',
  authToken: process.env.PROD_AUTH_TOKEN || 'test_token_docusign_producao',
  timeout: 15000, // Timeout maior para produ√ß√£o
  retries: 3
};

// Cliente de teste para produ√ß√£o
const TEST_CLIENTE_PROD = {
  nome: 'Cliente Teste Produ√ß√£o',
  cpf_cnpj: '987.654.321-00',
  tipo_cliente: 'pessoa_fisica',
  email: 'teste.producao@email.com',
  telefone: '(11) 99999-8888',
  cidade: 'S√£o Paulo',
  estado: 'SP'
};

// Fun√ß√£o para aguardar deploy
function aguardarDeploy() {
  return new Promise((resolve) => {
    console.log('‚è≥ Aguardando deploy do Netlify...');
    console.log('üìç URL de produ√ß√£o:', PROD_CONFIG.baseURL);
    console.log('üîÑ Verificando se a API est√° online...');
    
    // Aguardar 30 segundos para o deploy
    setTimeout(resolve, 30000);
  });
}

// Fun√ß√£o para verificar se a API est√° online
async function verificarAPIOnline() {
  try {
    console.log('üîç Verificando se a API est√° online...');
    
    const response = await axios.get('/', {
      baseURL: PROD_CONFIG.baseURL,
      timeout: 10000
    });
    
    if (response.status === 200) {
      console.log('‚úÖ API est√° online!');
      console.log('üìä Resposta:', response.data);
      return true;
    }
  } catch (error) {
    console.log('‚ùå API ainda n√£o est√° online:', error.message);
    return false;
  }
}

// Fun√ß√£o para aguardar API ficar online
async function aguardarAPIOnline() {
  let tentativas = 0;
  const maxTentativas = 10;
  
  while (tentativas < maxTentativas) {
    tentativas++;
    console.log(`üîÑ Tentativa ${tentativas}/${maxTentativas}...`);
    
    if (await verificarAPIOnline()) {
      return true;
    }
    
    // Aguardar 10 segundos entre tentativas
    await new Promise(resolve => setTimeout(resolve, 10000));
  }
  
  throw new Error('API n√£o ficou online ap√≥s v√°rias tentativas');
}

// Fun√ß√£o para criar cliente de teste
async function criarClienteTeste(clienteData = TEST_CLIENTE_PROD) {
  try {
    const response = await axios.post('/clientes', clienteData, {
      baseURL: PROD_CONFIG.baseURL,
      headers: {
        'Authorization': `Bearer ${PROD_CONFIG.authToken}`,
        'Content-Type': 'application/json'
      },
      timeout: PROD_CONFIG.timeout
    });
    
    console.log('‚úÖ Cliente de teste criado:', response.data.data.id);
    return response.data.data;
  } catch (error) {
    console.error('‚ùå Erro ao criar cliente de teste:', error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o para limpar cliente de teste
async function limparClienteTeste(clienteId) {
  try {
    await axios.delete(`/clientes/${clienteId}`, {
      baseURL: PROD_CONFIG.baseURL,
      headers: {
        'Authorization': `Bearer ${PROD_CONFIG.authToken}`
      },
      timeout: PROD_CONFIG.timeout
    });
    
    console.log('üßπ Cliente de teste removido:', clienteId);
  } catch (error) {
    console.error('‚ö†Ô∏è Erro ao limpar cliente de teste:', error.response?.data || error.message);
  }
}

// Teste 1: Verificar API Online
async function testAPIOnline() {
  console.log('\nüß™ Teste 1: Verificar API Online');
  
  try {
    const response = await axios.get('/', {
      baseURL: PROD_CONFIG.baseURL,
      timeout: PROD_CONFIG.timeout
    });

    console.log('‚úÖ API respondendo:', {
      status: response.status,
      message: response.data.message,
      environment: response.data.environment
    });

    return response.data;
  } catch (error) {
    console.error('‚ùå API n√£o est√° respondendo:', error.message);
    throw error;
  }
}

// Teste 2: Health Check
async function testHealthCheck() {
  console.log('\nüß™ Teste 2: Health Check');
  
  try {
    const response = await axios.get('/health', {
      baseURL: PROD_CONFIG.baseURL,
      timeout: PROD_CONFIG.timeout
    });

    console.log('‚úÖ Health Check:', {
      status: response.status,
      health: response.data.status,
      environment: response.data.environment
    });

    return response.data;
  } catch (error) {
    console.error('‚ùå Health Check falhou:', error.message);
    throw error;
  }
}

// Teste 3: Listar Clientes (sem autentica√ß√£o - deve falhar)
async function testListarClientesSemAuth() {
  console.log('\nüß™ Teste 3: Listar Clientes sem Autentica√ß√£o');
  
  try {
    await axios.get('/clientes', {
      baseURL: PROD_CONFIG.baseURL,
      timeout: PROD_CONFIG.timeout
    });
    
    console.log('‚ùå Deveria ter falhado sem autentica√ß√£o');
    return false;
  } catch (error) {
    if (error.response?.status === 401) {
      console.log('‚úÖ Autentica√ß√£o requerida corretamente (401)');
      return true;
    } else {
      console.log(`‚ö†Ô∏è Falhou com status ${error.response?.status}, esperado 401`);
      return false;
    }
  }
}

// Teste 4: Listar Clientes (com autentica√ß√£o)
async function testListarClientesComAuth() {
  console.log('\nüß™ Teste 4: Listar Clientes com Autentica√ß√£o');
  
  try {
    const response = await axios.get('/clientes?limit=5', {
      baseURL: PROD_CONFIG.baseURL,
      headers: {
        'Authorization': `Bearer ${PROD_CONFIG.authToken}`
      },
      timeout: PROD_CONFIG.timeout
    });

    console.log('‚úÖ Listagem de clientes:', {
      status: response.status,
      total: response.data.pagination?.total || 0,
      count: response.data.data?.length || 0
    });

    return response.data;
  } catch (error) {
    console.error('‚ùå Listagem de clientes falhou:', error.response?.data || error.message);
    throw error;
  }
}

// Teste 5: Criar Cliente
async function testCriarCliente() {
  console.log('\nüß™ Teste 5: Criar Cliente');
  
  try {
    const response = await axios.post('/clientes', TEST_CLIENTE_PROD, {
      baseURL: PROD_CONFIG.baseURL,
      headers: {
        'Authorization': `Bearer ${PROD_CONFIG.authToken}`,
        'Content-Type': 'application/json'
      },
      timeout: PROD_CONFIG.timeout
    });

    console.log('‚úÖ Cliente criado:', {
      status: response.status,
      id: response.data.data.id,
      nome: response.data.data.nome
    });

    return response.data.data;
  } catch (error) {
    console.error('‚ùå Cria√ß√£o de cliente falhou:', error.response?.data || error.message);
    throw error;
  }
}

// Teste 6: Buscar Cliente por ID
async function testBuscarClientePorId(clienteId) {
  console.log('\nüß™ Teste 6: Buscar Cliente por ID');
  
  try {
    const response = await axios.get(`/clientes/${clienteId}`, {
      baseURL: PROD_CONFIG.baseURL,
      headers: {
        'Authorization': `Bearer ${PROD_CONFIG.authToken}`
      },
      timeout: PROD_CONFIG.timeout
    });

    console.log('‚úÖ Cliente encontrado:', {
      status: response.status,
      id: response.data.data.id,
      nome: response.data.data.nome
    });

    return response.data.data;
  } catch (error) {
    console.error('‚ùå Busca por ID falhou:', error.response?.data || error.message);
    throw error;
  }
}

// Teste 7: Atualizar Cliente
async function testAtualizarCliente(clienteId) {
  console.log('\nüß™ Teste 7: Atualizar Cliente');
  
  const dadosAtualizacao = {
    telefone: '(11) 77777-7777',
    cidade: 'Belo Horizonte',
    estado: 'MG'
  };

  try {
    const response = await axios.put(`/clientes/${clienteId}`, dadosAtualizacao, {
      baseURL: PROD_CONFIG.baseURL,
      headers: {
        'Authorization': `Bearer ${PROD_CONFIG.authToken}`,
        'Content-Type': 'application/json'
      },
      timeout: PROD_CONFIG.timeout
    });

    console.log('‚úÖ Cliente atualizado:', {
      status: response.status,
      telefone: response.data.data.telefone,
      cidade: response.data.data.cidade,
      estado: response.data.data.estado
    });

    return response.data.data;
  } catch (error) {
    console.error('‚ùå Atualiza√ß√£o falhou:', error.response?.data || error.message);
    throw error;
  }
}

// Teste 8: Estat√≠sticas
async function testEstatisticas() {
  console.log('\nüß™ Teste 8: Estat√≠sticas');
  
  try {
    const response = await axios.get('/clientes/stats/estatisticas', {
      baseURL: PROD_CONFIG.baseURL,
      headers: {
        'Authorization': `Bearer ${PROD_CONFIG.authToken}`
      },
      timeout: PROD_CONFIG.timeout
    });

    console.log('‚úÖ Estat√≠sticas obtidas:', {
      status: response.status,
      total: response.data.data?.total || 0
    });

    return response.data;
  } catch (error) {
    console.error('‚ùå Estat√≠sticas falharam:', error.response?.data || error.message);
    throw error;
  }
}

// Teste 9: Busca Avan√ßada
async function testBuscaAvancada() {
  console.log('\nüß™ Teste 9: Busca Avan√ßada');
  
  try {
    const response = await axios.get('/clientes/search/buscar?q=Teste&limit=5', {
      baseURL: PROD_CONFIG.baseURL,
      headers: {
        'Authorization': `Bearer ${PROD_CONFIG.authToken}`
      },
      timeout: PROD_CONFIG.timeout
    });

    console.log('‚úÖ Busca avan√ßada executada:', {
      status: response.status,
      query: 'Teste',
      resultCount: response.data.data?.length || 0
    });

    return response.data;
  } catch (error) {
    console.error('‚ùå Busca avan√ßada falhou:', error.response?.data || error.message);
    throw error;
  }
}

// Executar todos os testes de produ√ß√£o
async function executarTestesProducao() {
  console.log('üöÄ Iniciando testes da API de Clientes em PRODU√á√ÉO');
  console.log('üìç URL Base:', PROD_CONFIG.baseURL);
  console.log('üîë Token de Teste:', PROD_CONFIG.authToken ? 'Configurado' : 'N√£o configurado');
  console.log('‚è±Ô∏è Timeout:', PROD_CONFIG.timeout + 'ms');
  
  let clienteTeste = null;
  
  try {
    // Aguardar deploy e API ficar online
    await aguardarDeploy();
    await aguardarAPIOnline();
    
    // Testes b√°sicos
    await testAPIOnline();
    await testHealthCheck();
    await testListarClientesSemAuth();
    await testListarClientesComAuth();
    
    // Testes que criam/modificam dados
    clienteTeste = await testCriarCliente();
    await testBuscarClientePorId(clienteTeste.id);
    await testAtualizarCliente(clienteTeste.id);
    await testEstatisticas();
    await testBuscaAvancada();
    
    console.log('\nüéâ Todos os testes de PRODU√á√ÉO passaram com sucesso!');
    console.log('üåê A API est√° funcionando perfeitamente em produ√ß√£o!');
    
  } catch (error) {
    console.error('\nüí• Alguns testes de PRODU√á√ÉO falharam:', error.message);
    console.error('üîç Verifique os logs do Netlify para mais detalhes');
  } finally {
    // Limpeza
    if (clienteTeste) {
      console.log('\nüßπ Limpando dados de teste...');
      await limparClienteTeste(clienteTeste.id);
    }
    
    console.log('\nüèÅ Testes de PRODU√á√ÉO conclu√≠dos');
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  executarTestesProducao().catch(console.error);
}

module.exports = {
  executarTestesProducao,
  testAPIOnline,
  testHealthCheck,
  testListarClientesSemAuth,
  testListarClientesComAuth,
  testCriarCliente,
  testBuscarClientePorId,
  testAtualizarCliente,
  testEstatisticas,
  testBuscaAvancada
};
